@use "sass:map";
@use "variables" as *;

$variant-suffixes: (
    "normal": "",
    "dark": "-dark",
    "light": "-light",
);

@function get-color($theme, $variant-name: "normal") {
    @return map.get(map.get($color-themes, $theme), $variant-name);
}

@mixin themed($property, $theme-variants, $variant-name) {
    #{$property}: #{map.get($theme-variants, $variant-name)} !important;

    @if $variant-name == "normal" {
        &.hover-light:hover {
            #{$property}: #{map.get($theme-variants, "light")} !important;
        }
    } @else if $variant-name == "dark" {
        &.hover-light:hover {
            #{$property}: #{map.get($theme-variants, "normal")} !important;
        }
    }
}

@each $theme, $theme-variants in $color-themes {
    @each $variant-name, $variant-suffix in $variant-suffixes {
        .bg-#{$theme}#{$variant-suffix} {
            @include themed("background-color", $theme-variants, $variant-name);
        }
        .border-#{$theme}#{$variant-suffix} {
            border-width: 2px;
            @include themed("border-color", $theme-variants, $variant-name);
        }
        .text-#{$theme}#{$variant-suffix} {
            @include themed("color", $theme-variants, $variant-name);
        }
        .theme-#{$theme}#{$variant-suffix} {
            border-width: 2px;
            color: #{map.get($theme-variants, "on")};
            @include themed("background-color", $theme-variants, $variant-name);
            @include themed("border-color", $theme-variants, $variant-name);
        }
    }
}
